openapi: 3.0.3
info:
  title: 'Python-Diplom-Final API'
  version: 0.1.0
paths:
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /basket:
    get:
      operationId: basket_retrieve
      description: |-
        Метод проверяет авторизацию пользователя,
        после чего возвращает информацию о товарах в корзине.
      tags:
      - basket
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: basket_create
      description: |-
        Метод проверяет авторизацию пользователя,
        после чего создает для него корзину и добавляет в неё информацию о товарах.
      tags:
      - basket
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: basket_update
      description: |-
        Метод проверяет авторизацию пользователя,
        после чего обновляет информацию о товарах в корзине.
      tags:
      - basket
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: basket_destroy
      description: |-
        Метод проверяет авторизацию пользователя,
        после чего удаляет информацию о товаре (товарах) в корзине.
      tags:
      - basket
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /categories:
    get:
      operationId: categories_list
      description: 'Метод возвращает список категорий. '
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - categories
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
  /order:
    get:
      operationId: order_retrieve
      description: |-
        "
        Метод проверяет авторизацию,
        после чего выдает информацию о заказе.
      tags:
      - order
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: order_create
      description: |-
        "
        Метод проверяет авторизацию,
        после чего размещает информацию о заказе.
      tags:
      - order
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /partner/orders:
    get:
      operationId: partner_orders_retrieve
      description: |-
        Метод проверяет авторизацию и тип пользователя (для работы требуется тип 'shop'),
        после чего получает информацию о заказе.
      tags:
      - partner
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /partner/state:
    get:
      operationId: partner_state_retrieve
      description: |-
        Метод post проверяет авторизацию пользователя, его тип (требуется тип 'shop'),
        после чего возвращает информацию о текущем статусе пользователя-магазина.
      tags:
      - partner
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: partner_state_create
      description: |-
        Метод проверяет авторизацию и тип пользователя (для работы требуется тип 'shop'),
        после чего обновляет информацию о текущем пользователя-магазина.
      tags:
      - partner
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /partner/update:
    post:
      operationId: partner_update_create
      description: |-
        Метод post проверяет авторизацию пользователя, его тип (требуется тип 'shop'),
        после чего создает обновленный прайс-лист.
      tags:
      - partner
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /products/:
    get:
      operationId: products_list
      description: Класс для поиска товаров.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - products
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductInfoList'
          description: ''
    post:
      operationId: products_create
      description: Класс для поиска товаров.
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductInfo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductInfo'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfo'
          description: ''
  /products/{id}/:
    get:
      operationId: products_retrieve
      description: Класс для поиска товаров.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfo'
          description: ''
    put:
      operationId: products_update
      description: Класс для поиска товаров.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductInfo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductInfo'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfo'
          description: ''
    patch:
      operationId: products_partial_update
      description: Класс для поиска товаров.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductInfo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductInfo'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfo'
          description: ''
    delete:
      operationId: products_destroy
      description: Класс для поиска товаров.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /shops:
    get:
      operationId: shops_list
      description: Класс для просмотра списка магазинов.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - shops
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedShopList'
          description: ''
  /user/contact:
    get:
      operationId: user_contact_retrieve
      description: |-
        Метод проверяет авторизацию,
        после чего выдает информацию о контактных данных покупателя.
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: user_contact_create
      description: |-
        Метод проверяет авторизацию,
        после чего добавляет информацию о новых контактных данных покупателя.
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: user_contact_update
      description: |-
        Метод проверяет авторизацию,
        после чего обновляет информацию о контактных данных покупателя.
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: user_contact_destroy
      description: |-
        Метод проверяет авторизацию,
        после чего удаляет информацию о контактных дынных покупателя.
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /user/details:
    get:
      operationId: user_details_retrieve
      description: Метод позволяет получить данные о пользователе.
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /user/login:
    post:
      operationId: user_login_create
      description: |-
        Метод позволяет произвести авторизацию пользователя.
        Проверяет обязательные поля (пароль и email), после чего создает токен для пользователя.
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /user/password_reset:
    post:
      operationId: user_password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /user/password_reset/confirm:
    post:
      operationId: user_password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /user/register:
    post:
      operationId: user_register_create
      description: |-
        Метод проверяет наличие обязательных полей, сложность пароля,
        уникальность имени пользователя, после чего сохраняет пользователя в системе.
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /user/register/confirm:
    post:
      operationId: user_register_confirm_create
      description: |-
        Метод проверяет наличие обязательных полей, статус токена и адреса почты,
        после чего подтверждает регистрацию пользователя в системе.
      tags:
      - user
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 40
      required:
      - id
      - name
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PaginatedCategoryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedProductInfoList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductInfo'
    PaginatedShopList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Shop'
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    PatchedProductInfo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        model:
          type: string
          title: Модель
          maxLength: 80
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        shop:
          type: integer
          title: Магазин
        quantity:
          type: integer
          title: Количество
        price:
          type: integer
          title: Цена
        price_rrc:
          type: integer
          title: Рекомендуемая розничная цена
        product_parameters:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameter'
          readOnly: true
    Product:
      type: object
      properties:
        name:
          type: string
          title: Название
          maxLength: 80
        category:
          type: string
          readOnly: true
      required:
      - category
      - name
    ProductInfo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        model:
          type: string
          title: Модель
          maxLength: 80
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        shop:
          type: integer
          title: Магазин
        quantity:
          type: integer
          title: Количество
        price:
          type: integer
          title: Цена
        price_rrc:
          type: integer
          title: Рекомендуемая розничная цена
        product_parameters:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameter'
          readOnly: true
      required:
      - id
      - price
      - price_rrc
      - product
      - product_parameters
      - quantity
    ProductParameter:
      type: object
      properties:
        parameter:
          type: string
          readOnly: true
        value:
          type: string
          title: Значение
          maxLength: 100
      required:
      - parameter
      - value
    Shop:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 50
        state:
          type: boolean
          title: Статус получения заказов
      required:
      - id
      - name
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
